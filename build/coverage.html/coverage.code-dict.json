{"/home/travis/build/npmtest/node-npmtest-lout/test.js":"/* istanbul instrument in package npmtest_lout */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-lout/lib.npmtest_lout.js":"/* istanbul instrument in package npmtest_lout */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_lout = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_lout = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-lout/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-lout && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_lout */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_lout\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_lout.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_lout.rollup.js'] =\n            local.assetsDict['/assets.npmtest_lout.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_lout.__dirname + '/lib.npmtest_lout.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-lout/node_modules/lout/lib/index.js":"'use strict';\n\n// Load modules\nconst Joi = require('joi');\nconst Boom = require('boom');\nconst Hoek = require('hoek');\nconst Path = require('path');\nconst Handlebars = require('handlebars');\n\n\n// Declare internals\n\nconst internals = {\n    defaults: {\n        endpoint: '/docs',\n        auth: false,\n        apiVersion: null,\n        basePath: Path.join(__dirname, '..', 'templates'),\n        cssPath: Path.join(__dirname, '..', 'public', 'css'),\n        helpersPath: Path.join(__dirname, '..', 'templates', 'helpers'),\n        partialsPath: Path.join(__dirname, '..', 'templates'),\n        indexTemplate: 'index',\n        routeTemplate: 'route',\n        methodsOrder: ['get', 'head', 'post', 'put', 'patch', 'delete', 'trace', 'options'],\n        filterRoutes: null\n    },\n    options: Joi.object({\n        engines: Joi.object(),\n        endpoint: Joi.string(),\n        apiVersion: Joi.string().allow(null),\n        basePath: Joi.string(),\n        cssPath: Joi.string().allow(null),\n        helpersPath: Joi.string(),\n        partialsPath: Joi.string(),\n        auth: Joi.object(),\n        indexTemplate: Joi.string(),\n        routeTemplate: Joi.string(),\n        filterRoutes: Joi.func()\n    })\n};\n\n\nexports.register = function (plugin, options, pluginNext) {\n\n    const validateOptions = internals.options.validate(options);\n    if (validateOptions.error) {\n        return pluginNext(validateOptions.error);\n    }\n\n    const settings = Hoek.clone(internals.defaults);\n    Hoek.merge(settings, options);\n\n    if (settings.endpoint[0] !== '/') {\n        settings.endpoint = `/${settings.endpoint}`;\n    }\n\n    if (settings.endpoint.length > 1 && settings.endpoint[settings.endpoint.length - 1] === '/') {\n        settings.endpoint = settings.endpoint.slice(0, -1);\n    }\n\n    const cssBaseUrl = `${settings.endpoint === '/' ? '' : settings.endpoint}/css`;\n\n    plugin.dependency(['inert', 'vision'], (server, serverNext) => {\n\n        server.views({\n            engines: settings.engines || {\n                html: {\n                    module: Handlebars.create()\n                }\n            },\n            path: settings.basePath,\n            partialsPath: settings.partialsPath,\n            helpersPath: settings.helpersPath,\n            runtimeOptions: {\n                data: {\n                    cssBaseUrl: cssBaseUrl.replace(/(.*?)((\\/\\w+)?\\/css)/, '$2'),\n                    apiVersion: settings.apiVersion\n                }\n            }\n        });\n\n        server.route({\n            method: 'GET',\n            path: settings.endpoint,\n            config: internals.docs(settings, server)\n        });\n\n        if (settings.cssPath) {\n            server.route({\n                method: 'GET',\n                path: `${cssBaseUrl}/{path*}`,\n                config: {\n                    handler: {\n                        directory: {\n                            path: settings.cssPath,\n                            index: false,\n                            listing: false\n                        }\n                    },\n                    plugins: {\n                        lout: false\n                    },\n                    auth: settings.auth\n                }\n            });\n        }\n\n        serverNext();\n    });\n\n    pluginNext();\n};\n\n\nexports.register.attributes = {\n    pkg: require('../package.json'),\n    multiple: true\n};\n\n\ninternals.docs = function (settings, server) {\n\n    return {\n        auth: settings.auth,\n        validate: {\n            query: Joi.object({\n                path: Joi.string(),\n                server: Joi.string()\n            }).unknown()\n        },\n        handler(request, reply) {\n\n            const routingTable = server.table();\n            const connections = [];\n\n            routingTable.forEach((connection) => {\n\n                if (request.query.server && connection.info.uri !== request.query.server) {\n                    return;\n                }\n\n                connection.table = connection.table.filter((item) => {\n\n                    if (request.query.path && item.path !== request.query.path) {\n\n                        return false;\n                    }\n\n                    return !item.settings.isInternal &&\n                        item.settings.plugins.lout !== false &&\n                        item.method !== 'options' &&\n                        (!settings.filterRoutes || settings.filterRoutes({\n                            method: item.method,\n                            path: item.path,\n                            settings: item.settings,\n                            connection\n                        }));\n                }).sort((route1, route2) => {\n\n                    if (route1.path > route2.path) {\n                        return 1;\n                    }\n\n                    if (route1.path < route2.path) {\n                        return -1;\n                    }\n\n                    return settings.methodsOrder.indexOf(route1.method) - settings.methodsOrder.indexOf(route2.method);\n                });\n\n                connections.push(connection);\n            });\n\n            if (connections.every((connection) => !connection.table.length)) {\n                return reply(Boom.notFound());\n            }\n\n            if (request.query.path && request.query.server) {\n                return reply.view(settings.routeTemplate, internals.getRoutesData(connections[0].table));\n            }\n\n            return reply.view(settings.indexTemplate, internals.getConnectionsData(connections));\n        },\n        plugins: {\n            lout: false\n        }\n    };\n};\n\n\ninternals.getConnectionsData = function (connections) {\n\n    connections.forEach((connection) => {\n\n        connection.table = internals.getRoutesData(connection.table);\n    });\n\n    return connections;\n};\n\n\ninternals.getRoutesData = function (routes) {\n\n    return routes.map((route) => ({\n        path: route.path,\n        method: route.method.toUpperCase(),\n        description: route.settings.description,\n        notes: internals.processNotes(route.settings.notes),\n        tags: route.settings.tags,\n        auth: internals.processAuth(route),\n        vhost: route.settings.vhost,\n        cors: route.settings.cors,\n        jsonp: route.settings.jsonp,\n        pathParams: internals.describe(route.settings.validate.params),\n        queryParams: internals.describe(route.settings.validate.query),\n        payloadParams: internals.describe(route.settings.validate.payload),\n        responseParams: internals.describe(route.settings.response.schema),\n        statusSchema: internals.describeStatusSchema(route.settings.response.status)\n    }));\n};\n\ninternals.describe = function (params) {\n\n    if (params === null || typeof params !== 'object') {\n\n        return null;\n    }\n\n    const description = internals.getParamsData(Joi.compile(params).describe());\n    description.root = true;\n    return description;\n};\n\ninternals.describeStatusSchema = function (status) {\n\n    const codes = Object.keys(status || {});\n    if (!codes.length) {\n        return;\n    }\n\n    const result = {};\n    codes.forEach((code) => {\n\n        result[code] = internals.describe(status[code]);\n    });\n    return result;\n};\n\n\ninternals.getParamsData = function (param, name) {\n\n    // Detection of \"false\" as validation rule\n    if (!name && param.type === 'object' && param.children && Object.keys(param.children).length === 0) {\n\n        return {\n            isDenied: true\n        };\n    }\n\n    // Detection of conditional alternatives\n    if (param.ref && param.is) {\n\n        return {\n            condition: {\n                key: internals.formatReference(param.ref),\n                value: internals.getParamsData(param.is, param.is.type)\n            },\n            then: param.then && internals.getParamsData(param.then, param.then.type),\n            otherwise: param.otherwise && internals.getParamsData(param.otherwise, param.otherwise.type)\n        };\n    }\n\n    let type;\n    if (param.valids && param.valids.some(internals.isRef)) {\n        type = 'reference';\n    }\n    else {\n        type = param.type;\n    }\n\n    const data = {\n        name,\n        description: param.description,\n        notes: internals.processNotes(param.notes),\n        tags: param.tags,\n        meta: param.meta,\n        unit: param.unit,\n        type,\n        allowedValues: param.valids ? internals.getExistsValues(type, param.valids) : null,\n        disallowedValues: param.invalids ? internals.getExistsValues(type, param.invalids) : null,\n        examples: param.examples,\n        peers: param.dependencies && param.dependencies.map(internals.formatPeers),\n        target: type === 'reference' ? internals.getExistsValues(type, param.valids) : null,\n        flags: param.flags && {\n            allowUnknown: param.flags.allowUnknown,\n            default: param.flags.default,\n            encoding: param.flags.encoding, // binary specific\n            insensitive: param.flags.insensitive, // string specific\n            required: param.flags.presence === 'required',\n            forbidden: param.flags.presence === 'forbidden',\n            stripped: param.flags.strip,\n            allowOnly: param.flags.allowOnly\n        }\n    };\n\n    if (data.type === 'object') {\n        let children = [];\n\n        if (param.children) {\n            const childrenKeys = Object.keys(param.children);\n            children = children.concat(childrenKeys.map((key) => internals.getParamsData(param.children[key], key)));\n        }\n\n        if (param.patterns) {\n            children = children.concat(param.patterns.map((pattern) => internals.getParamsData(pattern.rule, pattern.regex)));\n        }\n\n        data.children = children;\n    }\n\n    if (data.type === 'array' && param.items) {\n\n        if (param.orderedItems) {\n            data.orderedItems = param.orderedItems.map((item) => internals.getParamsData(item));\n        }\n\n        data.items = [];\n        data.forbiddenItems = [];\n        param.items.forEach((item) => {\n\n            item = internals.getParamsData(item);\n            if (item.flags && item.flags.forbidden) {\n                data.forbiddenItems.push(item);\n            }\n            else {\n                data.items.push(item);\n            }\n        });\n    }\n\n    if (data.type === 'alternatives') {\n        data.alternatives = param.alternatives.map((alternative) => internals.getParamsData(alternative));\n    }\n    else  {\n        if (param.rules) {\n            data.rules = param.rules.map((rule) => ({\n                name: internals.capitalize(rule.name),\n                params: internals.processRuleArgument(rule)\n            }));\n        }\n        else {\n            data.rules = [];\n        }\n    }\n\n    return data;\n};\n\n\ninternals.getExistsValues = function (type, exists) {\n\n    const values = exists.filter((value) => {\n\n        if (typeof value === 'string' && value.length === 0) {\n            return false;\n        }\n\n        if (type === 'number' && Math.abs(value) === Infinity) {\n            return false;\n        }\n\n        return true;\n    }).map((value) => {\n\n        if (internals.isRef(value)) {\n\n            return internals.formatReference(value);\n        }\n\n        return JSON.stringify(value);\n    });\n\n    return values.length ? values : null;\n};\n\n\ninternals.capitalize = function (string) {\n\n    return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n\ninternals.formatPeers = function (condition) {\n\n    if (condition.key) {\n\n        return `Requires ${condition.peers.join(', ')} to ${condition.type === 'with' ? '' : 'not '}be present when ${condition.key} is.`;\n    }\n\n    return `Requires ${condition.peers.join(` ${condition.type} `)}.`;\n};\n\n\ninternals.isRef = function (ref) {\n\n    return typeof ref === 'string' && /^(ref|context):.+/.test(ref);\n};\n\n\ninternals.formatReference = function (ref) {\n\n    if (ref.startsWith('ref:')) {\n        return ref.substr(4);\n    }\n\n    return '$' + ref.substr(8);\n};\n\n\ninternals.processRuleArgument = function (rule) {\n\n    const arg = rule.arg;\n    if (rule.name === 'assert') {\n\n        return {\n            key: internals.formatReference(arg.ref),\n            value: internals.getParamsData(arg.schema)\n        };\n    }\n    else if (rule.name === 'regex' && arg.pattern) {\n        let pattern = arg.pattern;\n\n        if (arg.name) {\n            pattern += ` (${arg.name})`;\n        }\n\n        if (arg.invert) {\n            pattern += ' - inverted';\n        }\n\n        return pattern;\n    }\n    else if (internals.isRef(arg)) {\n        return {\n            ref: internals.formatReference(arg)\n        };\n    }\n\n    return arg || '';\n};\n\ninternals.processNotes = function (notes) {\n\n    if (!notes) {\n        return;\n    }\n\n    if (!Array.isArray(notes)) {\n        return [notes];\n    }\n\n    return notes;\n};\n\ninternals.processAuth = function (route) {\n\n    const auth = route.connection.auth.lookup(route);\n\n    /* $lab:coverage:off$ */\n    if (auth && (auth.entity || auth.scope)) { // Hapi < 12\n        auth.access = [{\n            entity: auth.entity,\n            scope: {\n                selection: auth.scope\n            }\n        }];\n    }\n    /* $lab:coverage:on$ */\n\n    return auth;\n};\n","/home/travis/build/npmtest/node-npmtest-lout/node_modules/lout/templates/helpers/collapse.js":"'use strict';\n\nconst Handlebars = require('handlebars');\n\nlet uniqueId = 0;\n\nmodule.exports = function (options) {\n\n    const data = Handlebars.createFrame(options.data);\n    data.collapseId = uniqueId++;\n\n    const children = options.fn.partials.children(this).trim();\n    let content = options.fn(this).trim();\n    if (content) {\n        data.static = false;\n\n        const header = options.fn.partials.header(this, { data }).trim();\n        content = `${header}\n            <div class=\"collapse\" id=\"type${data.collapseId}\">\n                <dl class=\"well\">\n                    ${content}\n                </dl>\n            </div>`;\n    }\n    else {\n        data.static = true;\n        content = options.fn.partials.header(this, { data });\n    }\n\n    return new Handlebars.SafeString(content + children);\n};\n","/home/travis/build/npmtest/node-npmtest-lout/node_modules/lout/templates/helpers/colorFromMethod.js":"'use strict';\n\nmodule.exports = function (context) {\n\n    switch (context.method) {\n        case 'GET':\n            return 'label label-primary';\n        case 'PUT':\n            return 'label label-warning';\n        case 'POST':\n            return 'label label-success';\n        case 'DELETE':\n            return 'label label-danger';\n        default:\n            return 'label label-default';\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-lout/node_modules/lout/templates/helpers/exists.js":"'use strict';\n\nmodule.exports = function (value) {\n\n    return value !== undefined && value !== null;\n};\n","/home/travis/build/npmtest/node-npmtest-lout/node_modules/lout/templates/helpers/join.js":"'use strict';\n\nconst Handlebars = require('handlebars');\n\nmodule.exports = function (context) {\n\n    return new Handlebars.SafeString(context.join(', '));\n};\n","/home/travis/build/npmtest/node-npmtest-lout/node_modules/lout/templates/helpers/json.js":"'use strict';\n\nconst Handlebars = require('handlebars');\n\nmodule.exports = function (context) {\n\n    return new Handlebars.SafeString(JSON.stringify(context, null, 2).replace(/(\\r\\n|\\n|\\r)/gm, '<br>'));\n};\n","/home/travis/build/npmtest/node-npmtest-lout/node_modules/lout/templates/helpers/multipleIf.js":"'use strict';\n\n// Helper to check for at least one truthy object in a list\nmodule.exports = function () {\n\n    const options = Array.prototype.slice.call(arguments, -1)[0];\n    const conditions = Array.prototype.slice.call(arguments, 0, -1);\n\n    return conditions.some((v) => v) ? options.fn(this) : options.inverse(this);\n};\n","/home/travis/build/npmtest/node-npmtest-lout/node_modules/lout/templates/helpers/name.js":"'use strict';\n\nconst Handlebars = require('handlebars');\n\nmodule.exports = function () {\n\n    if (this.name) {\n        return new Handlebars.SafeString(this.name);\n    }\n\n    if (this.allowedValues && this.allowedValues.length > 1) {\n        return new Handlebars.SafeString('<span class=\"text-danger\">one of</span>');\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-lout/node_modules/lout/templates/helpers/type.js":"'use strict';\n\nconst Handlebars = require('handlebars');\n\nmodule.exports = function (isAlternative) {\n\n    if (isAlternative || this.root) {\n        return new Handlebars.SafeString('<span>&nbsp;</span>');\n    }\n\n    let type = this.type;\n    if (type === 'object'\n        || type === 'alternatives'\n        || (type === 'array' && this.items)) {\n        type = '';\n    }\n\n    if (this.allowedValues) {\n        // Used for array and alternatives rendering\n        if (!this.name) {\n            type = this.allowedValues.join(', ');\n        }\n\n        // with only one `.valid()`, just show that, it's the only possiblity\n        else if (this.allowedValues.length === 1\n            && this.flags\n            && this.flags.allowOnly) {\n            type = this.allowedValues[0];\n        }\n\n        // with multiple `.valid()` values, delcare it must be one of those\n        else if (this.flags && this.flags.allowOnly) {\n            type = `<span class=\"text-danger\">must be one of</span> <span>${this.allowedValues.join(', ')}</span>`;\n        }\n\n        // if there's a single allowedValue and it's not required\n        else if (this.allowedValues.length === 1) {\n            type += ` (<span class=\"text-danger\">can also be</span> <span>${this.allowedValues[0]}</span>)`;\n        }\n\n        // if there's allowedValues, but they're not required\n        else {\n            type += ` (<span class=\"text-danger\">can also be one of</span> <span>${this.allowedValues.join(', ')}</span>)`;\n        }\n    }\n\n    return new Handlebars.SafeString(`<span class=\"field-type\">${type.trim()}</span>`);\n};\n"}